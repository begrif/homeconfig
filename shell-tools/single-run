#!/bin/bash
# (not /bin/sh compatible)
# Run a single instance of something.
#
# Intended use is for this command to be stuck in front of some other command
# line. Eg:
#       "/some/long/cron --options -go here" ->
#       "single-run /some/long/cron --options -go here"
#
# But redirections are an issue, and not considered by other single run
# locking tools that I've seen (eg: https://www.timkay.com/solo/ or lots
# of simple lockfile implementations such as
# https://stackoverflow.com/questions/1715137/ offers). So this has
# special options for that case.
#
# Consider: 
#       /some/long/cron --options -go here > /var/log/output 2>&1
# If you just stuck "single-run" or the like in front of that, you'd
# clobber the existing output file *every* time. Note that append (">>")
# is probably safe to always use, so doesn't get special options.
#
# Redirection options:
#       -a ALLOUTPUT            use for the > ALLOUTPUT 2>&1 case
#       -e ERROR                use for just errors
#       -o OUTPUT               use for just standard out
#       -i INPUT                use for standard in
#
#
# These are only used for the program output, and only started after lock
# checks are cleared. Errors from single-run itself still go to the regular
# stderr. There's also an informational file created in the lock directory,
# useful for getting some info about a running process.
#
# There's also
#       -t TMPDIR               directory to use for /tmp
#       -w SECONDS              to adjust how old a lock file can be before
#                               issuing a warning.
#
# Example: instead of
#       /some/long/cron --options -go here > /var/log/output 2>&1
# Use:
#       /path/to/single-run -a /var/log/output -- /some/long/cron --options -go here
#
# Benjamin Griffin              July 2018

# major config

# after big_time start issuing warnings if the previous process still runs
big_time=$(( 60 * 60 * 8 ))     # eight hours

# ideally this is a directory that gets cleaned on reboot
root_tmp_dir=/tmp
dir_pre=single_run_lock

# complete lock directory looks something like:
#    $root_tmp_dir/$dir_pre.$clean_cmd
# so, maybe that expands to "/tmp/single_run_lock.ansible-pull"


# lessor config
PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin
export PATH

infile=
outfile=
errfile=
allfile=

# command line parse
loop=yes
while [[ $loop = yes ]] ; do
  thisarg="$1"
  case "$thisarg" in
    --) # end of args
        shift
        loop=no
        ;;

    -t|--tmp) # directory for temporary locks
        shift
        root_tmp_dir="$1"
        shift
        ;;

    -w|--warn) # warn time
        shift
        big_time="$1"
        shift
        ;;

    -o|--out) # remap stdout
        shift
        outfile="$1"
        shift
        ;;

    -i|--in) # remap stdin
        shift
        infile="$1"
        shift
        ;;

    -e|--error) # remap stderror
        shift
        errfile="$1"
        shift
        ;;

    -a|--allout) # remap stderr and stdout
        shift
        allfile="$1"
        shift
        ;;


    -*) # usage error
        echo >&2 "$0: usage error: option $1 unknown"
        echo >&2 "Usage: single-run [ [ OPTIONS ] -- ] program-to-run [ program options ]"
        echo >&2 "    -a FILE   ALL output (don't mix with -e/-o)"
        echo >&2 "    -e FILE   STDERR file"
        echo >&2 "    -i FILE   STDIN file"
        echo >&2 "    -o FILE   STDOUT file"
        echo >&2 "    -t DIR    temp dir to use"
        echo >&2 "    -w SECS   age in seconds of lock before issing warning"
        echo >&2 "    --            end of options"
        exit 2
        ;;

    ?*) # seem to have us a prorgam
        loop=no
        ;;
  esac
done


cmd="$1"; shift

# turn something like "/usr/bin/X11.R6" into "usrbinX11R6"
# note 'a-zA-Z0-9_-' is POSIX / BSD syntax; needs a [ ] wrapper on SysV
clean_cmd=$(echo "$cmd" | tr -cd 'a-zA-Z0-9_-')
dir=$root_tmp_dir/$dir_pre.$clean_cmd

# parts of this output are parsed by the script, so be careful with changes
# %F %T : date and time like "2018-07-09 15:05:37"
# %n    : new line
# %s    : seconds since epoch
# $$    : shell pid
datefmt="%F %T%nepoch=%s%npid=$$"


# start check for existing run
if mkdir $dir 2>/dev/null ; then
    # mkdir succeeded, no existing run
    date +"Started at $datefmt" > $dir/info.txt
    echo "Command line: $cmd $@" >> $dir/info.txt
else
    # (probably) have a directory, see if there is a running process

    # protection against the grep failing (like mkdir failed because of
    # other missing path components)
    failedgreppid=1000000000
    pid=$failedgreppid

    # grep pipe tail in case of restarts; stderr not redirected to
    # show missing file / directory errors
    eval $(grep '^pid=' $dir/info.txt | tail -1)
    if [[ $pid = $failedgreppid ]] ; then
        echo >&2 "$0: ERROR: unknown state for lock dir $dir; bailing"
        exit 1
    fi

    if kill -0 $pid 2>/dev/null ; then
        # earlier process still running
        eval $(grep '^epoch=' $dir/info.txt | tail -1)
        now=$(date +%s)
        second_diff=$(( $now - $epoch ))

        if expr $second_diff \> $big_time > /dev/null ; then
            echo >&2 "$0: WARNING: process $cmd ($pid) has been running for $second_diff seconds"
            exit 1
        fi

        # not so long, exit quietly
        exit 0
    fi

    # the kill failed if we are here
    # FIXME: maybe create another (sub)directory to guard against
    # race conditions taking over the lock directory
    echo "$0: WARNING: process $pid is gone." >> $dir/info.txt
    date +"Restarting at $datefmt" >> $dir/info.txt
    echo "Command line: $cmd $@" >> $dir/info.txt
fi

# no existing run, we are good to go

# ensure we clean-up any non-exceptional run (sudden shutdown or kill -9 are
# examples of "exceptional")
function clean_up {
    rm -rf $dir
}
trap clean_up EXIT

# start redirection config
exec 3>&1       # dupe stdout to 3
exec 4>&2       # dupe stderr to 4

if [[ ! -z $outfile ]] ; then
  exec 3>$outfile
fi
if [[ ! -z $errfile ]] ; then
  exec 4>$errfile
fi
if [[ ! -z $infile ]] ; then
  # safe to always redirect
  exec <$infile
fi

if [[ ! -z $allfile ]] ; then
  exec 3>$allfile
  exec 1>&3- 2>&1       # copy descriptor 3 to stdout and 2 to stdout
else
  # when not using allfile, accept stdout / stderr redirects
  exec 1>&3- 2>&4-      # copy descriptor 3 to stdout and 4 to stderr
fi

# FINALLY run the command line
"$cmd" "$@"
# propagate exit status
exit $?
