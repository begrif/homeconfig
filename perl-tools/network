#!/usr/bin/perl -w
# network address tool, reimplented how many times by how many people?
# usage: (eg)
#     network   ip=192.168.2.1 netmask=255.255.224.0
#     network   cidr=10.32.8.0/21
#     network   cidr=/21
# netmask octets can be 0, 128, 192, 224, 240, 248, 252, 254, or 255.

use strict;
use vars qw ( %octet $netmask $netsize $hostsize $ip $IP
	      $netMASK $hostMASK $net $host $net_quad $host_quad
	      $first $last $broad
            );
              
$ip      = '10.0.0.0';
$netmask = '255.0.0.0';

#  decimal      binary
#      128	10000000
#       64       1000000
#       32        100000
#       16         10000
#        8          1000
#        4           100
#        2            10
#        1             1
#
#      dec      binary       # bits set
$octet{000} = ['00000000',  0];
$octet{128} = ['10000000',  1];
$octet{192} = ['11000000',  2];
$octet{224} = ['11100000',  3];
$octet{240} = ['11110000',  4];
$octet{248} = ['11111000',  5];
$octet{252} = ['11111100',  6];
$octet{254} = ['11111110',  7];
$octet{255} = ['11111111',  8];

if(!defined $ARGV[0]) {
  print "usage: (eg)\n";
  print "     network   ip=192.168.2.1 netmask=255.255.224.0\n";
  print "     network   block=10.32.8.0/21\n";
  print "Sample output:\n";
}
while (defined $ARGV[0]) {
  my $this = shift;

  if($this =~ /^(-b|(--)?(block|cidr))/) {
     my $block;
     if($this =~ /=(.*)/) {
       $block = $1;
     } else {
       $block = shift;
     }
     if(defined($block) and $block =~ m%^/(\d+)$%) {
       $block = "10.0.0.0$block";
     }
     if(!defined($block) or $block !~ m%^([.0-9]+)/(\d+)$%) {
       die "$0: bad block, expecting A.B.C.D/size format\n";
     }
     $ip = $1;
     $netmask = sizetomask($2);
     next;
  }

  if($this =~ /^(-n|(--)?netmask)/) {
     if($this =~ /=(.*)/) {
       $netmask = $1;
     } else {
       $netmask = shift;
     }
     next;
  }

  if($this =~ /^(-a|(--)?(ip|ipaddr|addr))/) {
     if($this =~ /=(.*)/) {
       $ip = $1;
     } else {
       $ip = shift;
     }
     next;
  }
} # while checking ARGV

if(!defined($ip) or 0 == length($ip) or $ip !~ /^\d+\.\d+\.\d+\.\d+$/) {
  die "$0: not a usable IP: $ip\n";
}
if(!defined($netmask) or 0 == length($netmask) or $netmask !~ /^\d+\.\d+\.\d+\.\d+$/) {
  die "$0: not a usable netmask: $netmask\n";
}

$netMASK = 0;

$netsize = 0;
for my $oct ($netmask =~ /(\d+)\b/g) {
  if(defined($octet{$oct})) {
    $netsize += $octet{$oct}[1];
    $netMASK = ($netMASK * 256) + $oct;
  } else {
    warn "Bad octet $oct in $netmask (expect " .
	  join(",", sort {$a <=> $b} (keys %octet)) .
	 ")\n";
  }
}

$IP = 0;
for my $oct ($ip =~ /(\d+)\b/g) {
  if($oct < 256) {
    $IP = ($IP * 256) + $oct;
  } else {
    warn "Bad octet $oct in $ip\n";
  }
}

$hostsize = 32 - $netsize;
$hostMASK = 0xFFFFFFFF ^ $netMASK;

$net  = $IP & $netMASK;
$host = $IP & $hostMASK;

$net_quad = rawtoquad($net);
$host_quad = rawtoquad($host);

printf "Using ipaddr=%s netmask=%s\n\n", $ip, $netmask;

printf "Netsize: %d bits, mask %08X; hostsize %d bits, mask %08X\n", 
	$netsize, $netMASK, $hostsize, $hostMASK ;
printf "Net part of [%s] is %08X in hex, %s as quad;\nhost part is %08X, %s\n",
	$ip, $net, $net_quad, $host, $host_quad ;

if($netsize != 32 ) {
  $first = rawtoquad($net | 1);
  $last  = rawtoquad($net | ($hostMASK ^ 1) );
  $broad = rawtoquad($net | $hostMASK );
  printf "Network %s/%d, broadcast $broad\n", $net_quad, $netsize, $broad;
  printf "First is %s, last is %s; %s total IPs\n\n", $first, $last, 
  	(2 ** $hostsize) -2;
}

exit;

sub rawtoquad {
  my $raw = shift;
  my $quad = '';

  $quad = sprintf("%08x", $raw);
  $quad =~ s/(..)/hex($1).'.'/ge; 
  chop($quad);
  $quad;
} # &rawtoquad()

sub sizetomask {
  #y $binary = reverse(substr(('0' x shift) . ('1' x 32), 0, 32));
  my $binary = substr(('1' x shift) . ('0' x 32), 0, 32);
  my %rev;

  for my $k (keys %octet) {
    my $v = $octet{$k}[0];
    $rev{$v} = sprintf("%d.", $k + 0);
  }

  # here it stops being binary
  $binary =~ s/(........)/$rev{$1}/eg;
  chop $binary;
  $binary;
} # &sizetomask()
